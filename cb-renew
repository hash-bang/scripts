#!/bin/bash
# Wrapper around Certbot for a sane config
# Usage: cb-renew [-m method]

HELP="
cb-renew [-m method]

Perform a \"sane\" certbot renewal process.

Unlike the regular \"certbot renew\" process this script has the following behaviours:

1. Detect the correct version of Certbot to use (for older systems needing \"certbot-auto\")
2. Detect the correct method to use when renewing (e.g. restart / reload Nginx automatically)
3. Sanity checks before main process avoiding downtime


-m [method]         Specify the Certbot setup mode
			\"auto\"     - Try to detect the the method automatically (default)
			\"dme\"      - DNS-Made-Easy DNS auth (uses LE: DME method)
			\"nginx\"    - Full server renew via Nginx service start / stop (uses LE: standalone method)
			\"nginx-wr\" - Use Nginx + Webroot (via /var/www) (uses LE: webroot method)

-h, --help          Show command line help
"

METHOD="auto"
CERTBOT="certbot"

# Argument processing {{{
PARAMS=()
while (( "$#" )); do
	case "$1" in
		-m)
			METHOD="$2"
			shift
			shift
			;;
		-h|--help)
			echo "$HELP"
			exit 0
			;;
		--) # end argument parsing
			shift
			break
			;;
		-*|--*=) # unsupported flags
			echo "Error: Unsupported flag $1" >&2
			exit 1
			;;
		*) # preserve positional arguments
			PARAMS+=("$1")
			shift
			;;
	esac
done
# }}}

# Certbot binary detection {{{
if [ -x "$HOME/certbot-auto" ]; then
	CERTBOT="$HOME/certbot-auto"
elif [ `sudo which certbot >/dev/null; echo "$?"` == 0 ]; then
	CERTBOT="certbot"
else
	echo "Cannot determine Certbot binary to use - aborting"
	exit 0
fi
# }}}

# Auto method detection {{{
if [ "$METHOD" == "auto" ]; then
	if [ -e "$HOME/.dnsmadeeasy" ]; then
		echo "Found DME config file - assuming 'DNS Made Easy' method"
		METHOD="dme"
	elif [ `ps ax | grep -q nginx; echo "$?"` == 0 ]; then
		if [ `grep -q .well-known /etc/nginx/nginx.conf; echo "$?"` == 0 ]; then
			echo "Found Nginx process + .well-known in nginx.conf file - assuming 'Nginx-WR' method"
			METHOD='nginx'
		else
			echo "Found Nginx process - assuming 'Nginx' method"
			METHOD='nginx'
		fi
	else
		echo "Cannot automatically determine method to use - aborting"
		exit 1
	fi
fi
# }}}

# 0. Sanity check - check we have at least one cert to renew and that certbot works {{{
sudo $CERTBOT certificates >/dev/null
if [ "$?" != 0 ]; then
	echo "Something went wrong running `$CERTBOT certificates` - aborting"
	exit 1
fi

sudo $CERTBOT certificates | grep -q "Found the following"
if [ "$?" != 0 ]; then
	echo "No certificates found to renew - aborting"
	exit 1
fi
# }}}

# 1. Pre-procesing steps {{{
if [ "$METHOD" == 'nginx' ]; then
	echo "Stopping Nginx process..."
	sudo service nginx stop
elif [ "$METHOD" == 'nginx-wr' ]; then
	echo "Creating /var/www/.well-known..."
	if [ -e "/var/www/.well-known" ]; then
		echo "ERROR: /var/www/.well-known already exists, remove it to continue"
		exit 1
	fi
	sudo mkdir /var/www/.well-known
fi
# }}}

# 2. Renewal {{{
if [ "$METHOD" == 'nginx' ]; then
	echo "Renewing via standalone..."
	sudo $CERTBOT renew --standalone
elif [ "$METHOD" == 'nginx-wr' ]; then
	echo "Renewing via webroot..."
	sudo $CERTBOT renew --webroot
elif [ "$METHOD" == 'dme' ]; then
	echo "Renewing via DME..."
	sudo $CERTBOT renew
fi
# }}}

# 3. Post-processing steps {{{
if [ "$METHOD" == 'nginx' ]; then
	echo "Starting Nginx process..."
	sudo service nginx start
elif [ "$METHOD" == 'nginx-wr' ]; then
	echo "Cleaning up /var/www/.well-known..."
	sudo rm -r /var/www/.well-known

	echo "Reloading Nginx process..."
	sudo service nginx reload
elif [ "$METHOD" == "dme" ]; then
	echo "Reloading Nginx certificate data..."
	sudo service nginx reload
fi
# }}}

echo "All done."
