#!/bin/bash
# Greps for modules in a projects package.json file
# Usage: mgrep [-i|-r] <expression>
#
# -l  Grep in one line (useful when using as a sub-shell query)
# -D  Use devDependencies instead of regular dependencies
# -i  Bump the matching packages to latest (using `npm i PKG@latest`)
# -u  Update the matching packages via `npm update` - useful for Git repo linked hashes
# -r  Remove all matching packages
# -v  Show the current version of the matching packages
#

# Branch to exmaine for packages
BRANCH="dependencies"

# Default action is to print matching packages only
ACTION="print"

# Argument processing {{{
PARAMS=""
while (( "$#" )); do
	case "$1" in
		-l)
			ACTION="linegrep"
			shift
			;;
		-i)
			ACTION="install"
			shift
			;;
		-u)
			ACTION="update"
			shift
			;;
		-r)
			ACTION="remove"
			shift
			;;
		-v)
			ACTION="version"
			shift
			;;
		-D)
			BRANCH="devDependencies"
			shift
			;;
		--) # end argument parsing
			shift
			break
			;;
		-*|--*=) # unsupported flags
			echo "Error: Unsupported flag $1" >&2
			exit 1
			;;
		*) # preserve positional arguments
			PARAMS="$PARAMS $1"
			shift
			;;
	esac
done
# PARAMS=${PARAMS## } # remove leading spaces
# }}}

while [ ! -e "package.json" ]; do
	if [ "$PWD" == "/" ]; then
		echo "Cannot find package.json in this or parent directories"
		exit 1
	fi
	cd ..
done

BLUE='\033[0;34m'
RESET='\033[0m'
PACKAGES=`cat package.json | o pluck $BRANCH | o map _.toPairs | o columns id version | o select id | o to --csv | tail -n +2 | sort`

IFS=' ' read -a SEARCHPARAMS <<< "${PARAMS}"
for SEARCH in ${SEARCHPARAMS[@]}; do
	for PKG in `echo "$PACKAGES" | grep -i "$SEARCH"`; do
		case "$ACTION" in
			"linegrep")
				echo -n "${PKG} "
				;;
			"install")
				echo -e "* Install latest ${BLUE}${PKG}${RESET}"
				npm install --prefer-online --audit=false "$PKG@latest"
				echo
				if [ "$?" != 0 ]; then
					echo "Aborted install due to NPM returning a non-zero exit code"
					exit 1
				fi
				;;
			"update")
				echo -e "* Update ${BLUE}${PKG}${RESET}"
				npm update --prefer-online --audit=false "$PKG"
				echo
				if [ "$?" != 0 ]; then
					echo "Aborted update due to NPM returning a non-zero exit code"
					exit 1
				fi
				;;
			"remove")
				echo -e "* Remove ${BLUE}${PKG}${RESET}"
				npm remove --audit=false "$PKG"
				echo
				if [ "$?" != 0 ]; then
					echo "Aborted remove due to NPM returning a non-zero exit code"
					exit 1
				fi
				;;
			"version")
				echo "* $PKG"
				echo "Installed spec:" `grep "$PKG" package.json | cut -d '"' -f4`
				echo "NPM version   :" `npm -q show "$PKG" version`
				echo
				;;
			"print")
				echo "$PKG"
				;;
			*)
				echo "Unknown action: '$ACTION'"
				;;
		esac
	done
done
